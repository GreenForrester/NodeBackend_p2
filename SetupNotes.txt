
Steps to perform after downloading the project from github

npm install
npm run build
npm run start


1.  Created folder structure for clean architecture
2.  Created src folder as convention 
3.  Moved code files to src folder 
4.  Moved routes to folders in CA
5.  Deleted separate router folder
6.  Adjusted import references
7.  Executed command npx prisma init in my project folder
8.  Moved prisma folder under infrastructure/databases, prisma supports many databases
9.  observe .env file for db connection variable
10. Created schema for my project
11. Make copy of prisma schema file and create one for mongo and one for postgres
12. Mongodb schema has slight differences 
13. Edit env file for URLs of databases
14. We are using supabase and Mongocloud atlas ac config  for this example
15. npx prisma db push or npx prisma generate
16. Indexes should be managed carefully for better performance of DB
17. "npx prisma generate" prisma client generation
     npx prisma generate --schema=./schema.postgresql.prisma
     npx prisma generate --schema=./schema.mongodb.prisma

18. Migrate your database: 
    npx prisma migrate dev --schema=./schema.postgresql.prisma --name init
    npx prisma db push --schema=./schema.mongodb.prisma
    npx prisma migrate dev --schema=./schema.mongodb.prisma --name init (for mongodb)

19. write Clean architecture code repository to routes
20. Edit tsconfig.json
21. copied prisma and generated client to dist folder after running build manually
22. Write Postman tests for rest api
23. configure for elinting 
23. configure newrelic , download & install agent on machine. Edit package.json for newrelic
24. Download required modules and configure newrelic.js for appname and key



if you make changes in schema files, regenerate clients & redo
npx prisma generate --schema=.\src\ca_infrastructure\database\prisma\schema.postgres.prisma
npx prisma generate --schema=./schema.mongodb.prisma
npx prisma migrate dev --schema=./schema.postgresql.prisma --name <migration-name>


npm install dotenv
import dotenv from 'dotenv';
dotenv.config();













import { PrismaClient as PostgresPrismaClient } from './generated/postgresql';
import { PrismaClient as MongoPrismaClient } from './generated/mongodb';

const postgresPrisma = new PostgresPrismaClient();
const mongoPrisma = new MongoPrismaClient();

async function main() {
  const allPostgresUsers = await postgresPrisma.user.findMany();
  console.log(allPostgresUsers);

  const allMongoUsers = await mongoPrisma.user.findMany();
  console.log(allMongoUsers);
}

main()
  .catch(e => {
    throw e;
  })
  .finally(async () => {
    await postgresPrisma.$disconnect();
    await mongoPrisma.$disconnect();
  });


//-------------------
List all Orders with order items 
list product details if any order item is clicked, load product details
List products
//----------------------------------------------
Presentation - Controller
 *isolate the framework-specific HTTP request/response handling from your core business logic.

